/* The following code was generated by JFlex 1.6.1 */

package teste2;

import java.io.*; 
import java_cup.runtime.*;


import java.lang.System;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>teste2/Lexer.lex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\6\1\50\1\50\1\35\22\0\1\0\1\67\1\7"+
    "\2\0\1\103\1\65\1\22\1\70\1\71\1\37\1\17\1\102\1\20"+
    "\1\14\1\36\1\3\1\61\1\62\1\64\1\60\1\11\1\57\1\11"+
    "\1\63\1\2\1\101\1\51\1\73\1\66\1\77\2\0\4\4\1\16"+
    "\1\4\14\1\1\44\1\1\1\25\2\1\1\13\2\1\1\74\1\23"+
    "\1\75\1\76\1\1\1\0\1\26\1\27\1\40\1\5\1\15\1\30"+
    "\1\54\1\56\1\21\1\1\1\41\1\42\1\46\1\31\1\47\1\55"+
    "\1\1\1\32\1\53\1\33\1\24\1\34\1\43\1\12\1\45\1\1"+
    "\1\100\1\72\1\52\7\0\1\50\44\0\1\1\12\0\1\1\4\0"+
    "\1\1\5\0\27\1\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0"+
    "\5\1\7\0\1\1\1\0\1\1\201\0\5\1\1\0\2\1\2\0"+
    "\4\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\24\1\1\0\123\1\1\0\213\1\10\0\246\1\1\0\46\1\2\0"+
    "\1\1\7\0\47\1\110\0\33\1\5\0\3\1\55\0\53\1\25\0"+
    "\12\10\4\0\2\1\1\0\143\1\1\0\1\1\17\0\2\1\7\0"+
    "\2\1\12\10\3\1\2\0\1\1\20\0\1\1\1\0\36\1\35\0"+
    "\131\1\13\0\1\1\16\0\12\10\41\1\11\0\2\1\4\0\1\1"+
    "\5\0\26\1\4\0\1\1\11\0\1\1\3\0\1\1\27\0\31\1"+
    "\107\0\23\1\121\0\66\1\3\0\1\1\22\0\1\1\7\0\12\1"+
    "\4\0\12\10\1\0\20\1\4\0\10\1\2\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1\20\0\1\1"+
    "\15\0\2\1\1\0\3\1\4\0\12\10\2\1\23\0\6\1\4\0"+
    "\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\37\0\4\1\1\0\1\1\7\0\12\10\2\0\3\1\20\0"+
    "\11\1\1\0\3\1\1\0\26\1\1\0\7\1\1\0\2\1\1\0"+
    "\5\1\3\0\1\1\22\0\1\1\17\0\2\1\4\0\12\10\25\0"+
    "\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0"+
    "\5\1\3\0\1\1\36\0\2\1\1\0\3\1\4\0\12\10\1\0"+
    "\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0"+
    "\14\1\26\0\1\1\25\0\12\10\25\0\10\1\1\0\3\1\1\0"+
    "\27\1\1\0\20\1\3\0\1\1\32\0\2\1\6\0\2\1\4\0"+
    "\12\10\25\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0"+
    "\5\1\3\0\1\1\40\0\1\1\1\0\2\1\4\0\12\10\1\0"+
    "\2\1\22\0\10\1\1\0\3\1\1\0\51\1\2\0\1\1\20\0"+
    "\1\1\21\0\2\1\4\0\12\10\12\0\6\1\5\0\22\1\3\0"+
    "\30\1\1\0\11\1\1\0\1\1\2\0\7\1\37\0\12\10\21\0"+
    "\60\1\1\0\2\1\14\0\7\1\11\0\12\10\47\0\2\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0"+
    "\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0"+
    "\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\11\0"+
    "\12\10\2\0\4\1\40\0\1\1\37\0\12\10\26\0\10\1\1\0"+
    "\44\1\33\0\5\1\163\0\53\1\24\0\1\1\12\10\6\0\6\1"+
    "\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3\1\4\0\15\1"+
    "\14\0\1\1\1\0\12\10\6\0\46\1\1\0\1\1\5\0\1\1"+
    "\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0\7\1\1\0\1\1"+
    "\1\0\4\1\2\0\51\1\1\0\4\1\2\0\41\1\1\0\4\1"+
    "\2\0\7\1\1\0\1\1\1\0\4\1\2\0\17\1\1\0\71\1"+
    "\1\0\4\1\2\0\103\1\45\0\20\1\20\0\125\1\14\0\u026c\1"+
    "\2\0\21\1\1\0\32\1\5\0\113\1\6\0\10\1\7\0\15\1"+
    "\1\0\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0\3\1"+
    "\17\0\64\1\43\0\1\1\4\0\1\1\3\0\12\10\46\0\12\10"+
    "\6\0\130\1\10\0\51\1\1\0\1\1\5\0\106\1\12\0\37\1"+
    "\47\0\12\10\36\1\2\0\5\1\13\0\54\1\25\0\7\1\10\0"+
    "\12\10\46\0\27\1\11\0\65\1\53\0\12\10\6\0\12\10\15\0"+
    "\1\1\135\0\57\1\21\0\7\1\4\0\12\10\51\0\36\1\15\0"+
    "\2\1\12\10\54\1\32\0\44\1\34\0\12\10\3\0\3\1\12\10"+
    "\44\1\153\0\4\1\1\0\4\1\3\0\2\1\11\0\300\1\100\0"+
    "\u0116\1\2\0\6\1\2\0\46\1\2\0\6\1\2\0\10\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\37\1\2\0\65\1\1\0"+
    "\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0"+
    "\6\1\4\0\15\1\5\0\3\1\1\0\7\1\53\0\1\50\1\50"+
    "\107\0\1\1\15\0\1\1\20\0\15\1\145\0\1\1\4\0\1\1"+
    "\2\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1"+
    "\4\0\1\1\64\0\2\1\u0a7b\0\57\1\1\0\57\1\1\0\205\1"+
    "\6\0\4\1\3\0\2\1\14\0\46\1\1\0\1\1\5\0\1\1"+
    "\2\0\70\1\7\0\1\1\20\0\27\1\11\0\7\1\1\0\7\1"+
    "\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1"+
    "\1\0\7\1\120\0\1\1\u01d5\0\2\1\52\0\5\1\5\0\2\1"+
    "\4\0\126\1\6\0\3\1\1\0\132\1\1\0\4\1\5\0\51\1"+
    "\3\0\136\1\21\0\33\1\65\0\20\1\u0200\0\u19b6\1\112\0\u51cd\1"+
    "\63\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0\20\1\12\10\2\1"+
    "\24\0\57\1\20\0\37\1\2\0\106\1\61\0\11\1\2\0\147\1"+
    "\2\0\4\1\1\0\36\1\2\0\2\1\105\0\13\1\1\0\3\1"+
    "\1\0\4\1\1\0\27\1\35\0\64\1\16\0\62\1\34\0\12\10"+
    "\30\0\6\1\3\0\1\1\4\0\12\10\34\1\12\0\27\1\31\0"+
    "\35\1\7\0\57\1\34\0\1\1\12\10\6\0\5\1\1\0\12\1"+
    "\12\10\5\1\1\0\51\1\27\0\3\1\1\0\10\1\4\0\12\10"+
    "\6\0\27\1\3\0\1\1\3\0\62\1\1\0\1\1\3\0\2\1"+
    "\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\2\0\13\1"+
    "\7\0\3\1\14\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1"+
    "\1\0\7\1\1\0\53\1\1\0\4\1\4\0\2\1\132\0\43\1"+
    "\15\0\12\10\6\0\u2ba4\1\14\0\27\1\4\0\61\1\u2104\0\u016e\1"+
    "\2\0\152\1\46\0\7\1\14\0\5\1\5\0\1\1\1\0\12\1"+
    "\1\0\15\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0\14\1"+
    "\164\0\5\1\1\0\207\1\23\0\12\10\7\0\32\1\6\0\32\1"+
    "\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1"+
    "\43\0\14\1\1\0\32\1\1\0\23\1\1\0\2\1\1\0\17\1"+
    "\2\0\16\1\42\0\173\1\u0185\0\35\1\3\0\61\1\57\0\40\1"+
    "\20\0\21\1\1\0\10\1\6\0\46\1\12\0\36\1\2\0\44\1"+
    "\4\0\10\1\60\0\236\1\2\0\12\10\126\0\50\1\10\0\64\1"+
    "\234\0\u0137\1\11\0\26\1\12\0\10\1\230\0\6\1\2\0\1\1"+
    "\1\0\54\1\1\0\2\1\3\0\1\1\2\0\27\1\12\0\27\1"+
    "\11\0\37\1\141\0\26\1\12\0\32\1\106\0\70\1\6\0\2\1"+
    "\100\0\1\1\17\0\4\1\1\0\3\1\1\0\33\1\54\0\35\1"+
    "\3\0\35\1\43\0\10\1\1\0\34\1\33\0\66\1\12\0\26\1"+
    "\12\0\23\1\15\0\22\1\156\0\111\1\u03ba\0\65\1\56\0\12\10"+
    "\23\0\55\1\40\0\31\1\7\0\12\10\11\0\44\1\17\0\12\10"+
    "\20\0\43\1\3\0\1\1\14\0\60\1\16\0\4\1\13\0\12\10"+
    "\1\1\45\0\22\1\1\0\31\1\204\0\57\1\21\0\12\10\13\0"+
    "\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0"+
    "\5\1\3\0\1\1\37\0\5\1\u011e\0\60\1\24\0\2\1\1\0"+
    "\1\1\10\0\12\10\246\0\57\1\121\0\60\1\24\0\1\1\13\0"+
    "\12\10\46\0\53\1\25\0\12\10\u01d6\0\100\1\12\10\25\0\1\1"+
    "\u01c0\0\71\1\u0507\0\u0399\1\u0c67\0\u042f\1\u33d1\0\u0239\1\7\0\37\1"+
    "\1\0\12\10\146\0\36\1\22\0\60\1\20\0\4\1\14\0\12\10"+
    "\11\0\25\1\5\0\23\1\u0370\0\105\1\13\0\1\1\102\0\15\1"+
    "\u4060\0\2\1\u0bfe\0\153\1\5\0\15\1\3\0\11\1\7\0\12\1"+
    "\u1766\0\125\1\1\0\107\1\1\0\2\1\2\0\1\1\2\0\2\1"+
    "\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\101\1"+
    "\1\0\4\1\2\0\10\1\1\0\7\1\1\0\34\1\1\0\4\1"+
    "\1\0\5\1\1\0\1\1\3\0\7\1\1\0\u0154\1\2\0\31\1"+
    "\1\0\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1"+
    "\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0\10\1"+
    "\2\0\62\10\u1000\0\305\1\u053b\0\4\1\1\0\33\1\1\0\2\1"+
    "\1\0\1\1\2\0\1\1\1\0\12\1\1\0\4\1\1\0\1\1"+
    "\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1\1\0\1\1"+
    "\1\0\12\1\1\0\21\1\5\0\3\1\1\0\5\1\1\0\21\1"+
    "\u1144\0\ua6d7\1\51\0\u1035\1\13\0\336\1\u3fe2\0\u021e\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\2\2\1\1\4\1\2"+
    "\1\5\1\6\1\2\1\1\10\2\1\1\1\7\1\10"+
    "\3\2\1\11\1\12\3\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\1\1\33\1\1\1\3"+
    "\1\1\1\2\1\0\1\34\2\0\2\2\1\35\1\36"+
    "\1\37\3\2\2\0\1\34\1\0\21\2\1\40\1\0"+
    "\11\2\1\41\2\2\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\0\1\33"+
    "\1\32\1\0\1\3\2\2\4\0\1\55\2\2\1\1"+
    "\3\2\1\56\1\34\2\0\1\56\2\0\7\2\1\57"+
    "\1\1\4\2\1\60\2\40\1\0\6\2\1\61\7\2"+
    "\1\32\2\2\4\0\1\2\1\62\4\2\4\0\1\1"+
    "\2\2\1\63\5\2\1\64\1\65\3\2\1\66\4\2"+
    "\1\67\3\2\1\70\1\2\1\0\1\2\1\0\2\2"+
    "\1\71\4\2\1\72\1\2\1\73\5\2\1\1\1\2"+
    "\1\0\1\74\1\0\1\2\1\75\2\2\1\76\1\77"+
    "\1\100\4\2\1\1\1\101\2\2\1\102\7\2\1\103"+
    "\16\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\12\0\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\104\0\u0660\0\u06a4\0\u06e8\0\104\0\104\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\u0880\0\104\0\104\0\u08c4\0\u0908"+
    "\0\104\0\104\0\104\0\u094c\0\104\0\u0990\0\104\0\104"+
    "\0\u09d4\0\u0a18\0\u01dc\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0198"+
    "\0\104\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\104\0\104\0\210"+
    "\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0d48\0\u0dd0\0\u0e14"+
    "\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034"+
    "\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254"+
    "\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474"+
    "\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\u1650\0\104\0\u1694\0\u16d8\0\u0ae4\0\u171c\0\u1760"+
    "\0\u17a4\0\u17e8\0\u182c\0\u1870\0\104\0\u18b4\0\u18f8\0\u193c"+
    "\0\u1980\0\u19c4\0\u1a08\0\u0d8c\0\u0d8c\0\u1a4c\0\u1a90\0\u0d48"+
    "\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0"+
    "\0\u1cf4\0\210\0\210\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\210"+
    "\0\104\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0"+
    "\0\u2024\0\210\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc"+
    "\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc"+
    "\0\u2420\0\210\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8"+
    "\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\210\0\u2750\0\u2794"+
    "\0\u27d8\0\u281c\0\u2860\0\210\0\210\0\u28a4\0\u28e8\0\u292c"+
    "\0\210\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\210\0\u2a80\0\u2ac4"+
    "\0\u2b08\0\210\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0"+
    "\0\210\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\210\0\u2df4\0\210"+
    "\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014"+
    "\0\210\0\u3058\0\u309c\0\210\0\u30e0\0\u3124\0\210\0\210"+
    "\0\210\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\210\0\u32bc"+
    "\0\u3300\0\210\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498"+
    "\0\u34dc\0\210\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674"+
    "\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894"+
    "\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4"+
    "\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4"+
    "\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4"+
    "\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\2\1\7"+
    "\1\10\1\4\2\3\1\11\1\12\1\3\1\13\1\14"+
    "\1\15\1\16\1\2\1\17\1\3\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\3\1\33\3\3\1\34\1\3\1\2\1\35\1\36"+
    "\1\37\1\40\1\41\1\3\6\4\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\105\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\11\3\3\0\10\3"+
    "\3\0\12\3\20\0\1\10\2\4\2\10\2\0\1\10"+
    "\1\4\2\10\1\61\2\62\2\0\1\63\2\0\11\10"+
    "\3\0\10\10\3\0\4\10\6\4\20\0\1\10\1\64"+
    "\1\65\2\10\2\0\1\10\1\65\2\66\1\61\2\62"+
    "\2\0\1\63\2\0\11\10\3\0\10\10\3\0\4\10"+
    "\4\65\1\64\1\65\20\0\5\3\2\0\4\3\1\0"+
    "\1\67\1\3\2\0\1\3\2\0\11\3\3\0\10\3"+
    "\3\0\12\3\17\0\6\70\1\0\1\71\13\70\1\72"+
    "\60\70\1\0\5\10\2\0\4\10\1\0\2\10\2\0"+
    "\1\10\2\0\11\10\3\0\10\10\3\0\12\10\21\0"+
    "\2\61\5\0\1\61\2\0\1\73\42\0\6\61\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\6\3\1\74\2\3\3\0\2\3\1\75\5\3\3\0"+
    "\12\3\36\0\1\76\104\0\1\77\64\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\4\3\1\100"+
    "\1\101\3\3\3\0\6\3\1\102\1\103\3\0\12\3"+
    "\17\0\6\104\1\105\13\104\1\106\1\107\60\104\1\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\110\2\0"+
    "\11\3\3\0\10\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\3\0"+
    "\10\3\3\0\2\3\1\111\7\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\6\3\1\112"+
    "\2\3\3\0\5\3\1\113\1\3\1\114\3\0\12\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\1\115\1\3\1\116\6\3\3\0\2\3\1\117"+
    "\4\3\1\120\3\0\12\3\20\0\5\3\2\0\4\3"+
    "\1\0\1\121\1\3\2\0\1\122\2\0\11\3\3\0"+
    "\10\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\1\123\1\3\2\0\1\3\2\0\1\124\1\3\1\125"+
    "\6\3\3\0\10\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\6\3\1\126"+
    "\2\3\3\0\5\3\1\127\2\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\2\3\1\130\6\3\3\0\10\3\3\0\12\3\25\0"+
    "\1\2\133\0\1\131\1\132\45\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\2\3\1\133\6\3"+
    "\3\0\2\3\1\134\4\3\1\135\3\0\3\3\1\136"+
    "\6\3\20\0\5\3\2\0\4\3\1\0\1\137\1\3"+
    "\2\0\1\3\2\0\11\3\3\0\10\3\3\0\12\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\2\3\1\140\6\3\3\0\10\3\3\0\12\3"+
    "\20\0\5\3\2\0\4\3\1\0\1\141\1\3\2\0"+
    "\1\3\2\0\7\3\1\142\1\3\3\0\3\3\1\143"+
    "\4\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\3\0\7\3\1\144"+
    "\3\0\12\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\2\3\1\145\3\3\1\146\2\3"+
    "\3\0\10\3\3\0\12\3\104\0\1\147\10\0\1\150"+
    "\73\0\1\151\103\0\1\152\107\0\1\153\31\0\1\154"+
    "\45\0\1\155\4\0\1\156\76\0\1\157\10\0\1\160"+
    "\72\0\1\161\17\0\2\61\5\0\1\61\3\0\2\162"+
    "\2\0\1\163\35\0\6\61\20\0\1\10\2\164\2\10"+
    "\2\0\1\10\1\164\2\10\1\0\2\10\2\165\1\10"+
    "\2\0\11\10\3\0\10\10\3\0\4\10\6\164\20\0"+
    "\1\10\2\64\2\10\2\0\1\10\1\64\2\10\1\61"+
    "\2\62\2\0\1\63\2\0\11\10\3\0\10\10\3\0"+
    "\4\10\6\64\20\0\1\10\1\64\1\65\2\10\2\0"+
    "\1\10\1\65\2\10\1\61\2\62\2\0\1\63\2\0"+
    "\11\10\3\0\10\10\3\0\4\10\4\65\1\64\1\65"+
    "\20\0\1\10\4\166\2\0\1\10\1\166\2\10\1\0"+
    "\2\166\2\0\1\10\2\0\2\10\3\166\4\10\3\0"+
    "\1\166\7\10\3\0\4\10\6\166\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\4\3\1\167"+
    "\4\3\3\0\2\3\1\170\5\3\3\0\12\3\22\0"+
    "\1\171\3\0\1\70\1\0\1\171\1\172\7\0\2\70"+
    "\1\173\1\174\7\70\22\0\4\171\1\0\1\171\33\0"+
    "\1\175\70\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\6\3\1\176\2\3\3\0\10\3\3\0"+
    "\12\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\11\3\3\0\10\3\3\0\1\177\11\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\7\3\1\200\1\3\3\0\10\3\3\0\12\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\2\3\1\201\6\3\3\0\10\3\3\0\2\3"+
    "\1\202\7\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\7\3\1\203\1\3\3\0\10\3"+
    "\3\0\12\3\17\0\22\105\1\204\103\105\1\205\64\105"+
    "\1\206\3\105\1\104\1\105\1\206\1\207\7\105\1\210"+
    "\1\104\1\211\1\212\7\104\22\105\4\206\1\105\1\206"+
    "\17\105\1\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\5\3\1\213\3\3\3\0\10\3\3\0"+
    "\12\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\11\3\3\0\10\3\3\0\2\3\1\214"+
    "\7\3\20\0\5\3\2\0\4\3\1\0\1\215\1\3"+
    "\2\0\1\3\2\0\11\3\3\0\10\3\3\0\12\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\7\3\1\216\1\3\3\0\10\3\3\0\12\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\11\3\3\0\7\3\1\122\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\5\3\1\217\3\3\3\0\10\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\3\0\2\3\1\220\5\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\3\0\7\3\1\221\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\6\3"+
    "\1\222\2\3\3\0\10\3\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\11\3"+
    "\3\0\3\3\1\223\4\3\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\11\3"+
    "\3\0\2\3\1\223\5\3\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\2\3"+
    "\1\122\4\3\1\224\1\3\3\0\1\225\7\3\3\0"+
    "\12\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\5\3\1\216\3\3\3\0\10\3\3\0"+
    "\12\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\5\3\1\226\3\3\3\0\10\3\3\0"+
    "\12\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\1\216\10\3\3\0\10\3\3\0\12\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\11\3\3\0\10\3\3\0\2\3\1\227\7\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\6\3\1\230\2\3\3\0\10\3\3\0\12\3"+
    "\17\0\6\131\1\231\26\131\1\232\46\131\37\132\1\233"+
    "\44\132\1\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\11\3\3\0\10\3\3\0\1\234\1\3"+
    "\1\223\7\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\11\3\3\0\7\3\1\235\3\0"+
    "\12\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\5\3\1\236\3\3\3\0\6\3\1\237"+
    "\1\3\3\0\2\3\1\240\7\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\2\3\1\241"+
    "\6\3\3\0\10\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\5\3\1\223"+
    "\3\3\3\0\10\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\3\0"+
    "\1\3\1\216\6\3\3\0\2\3\1\242\7\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\3\0\2\3\1\243\5\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\6\3\1\244\2\3\3\0\10\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\245\2\0"+
    "\11\3\3\0\10\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\7\3\1\246"+
    "\1\3\3\0\10\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\5\3\1\247"+
    "\3\3\3\0\1\250\7\3\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\251\2\0\11\3"+
    "\3\0\10\3\3\0\12\3\21\0\2\252\5\0\1\252"+
    "\5\0\2\165\36\0\6\252\20\0\1\10\2\164\2\10"+
    "\2\0\1\10\1\164\2\10\1\0\2\10\2\0\1\63"+
    "\2\0\11\10\3\0\10\10\3\0\4\10\6\164\21\0"+
    "\2\252\5\0\1\252\45\0\6\252\20\0\5\3\2\0"+
    "\4\3\1\0\1\253\1\3\2\0\1\3\2\0\2\3"+
    "\1\254\6\3\3\0\10\3\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\1\113\1\3\2\0\1\3\2\0"+
    "\11\3\3\0\10\3\3\0\12\3\22\0\1\255\5\0"+
    "\1\255\45\0\4\255\1\0\1\255\21\0\4\256\3\0"+
    "\1\256\3\0\2\256\7\0\3\256\7\0\1\256\16\0"+
    "\6\256\21\0\4\257\3\0\1\257\3\0\2\257\7\0"+
    "\3\257\7\0\1\257\16\0\6\257\21\0\4\260\3\0"+
    "\1\260\3\0\2\260\7\0\3\260\7\0\1\260\16\0"+
    "\6\260\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\11\3\3\0\7\3\1\261\3\0\12\3"+
    "\20\0\5\3\2\0\4\3\1\0\1\262\1\3\2\0"+
    "\1\3\2\0\11\3\3\0\10\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\3\0\10\3\3\0\4\3\1\263\1\3\1\264"+
    "\1\3\1\223\1\265\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\3\0\10\3\3\0"+
    "\1\3\1\223\10\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\3\0\7\3\1\266"+
    "\3\0\12\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\2\3\1\223\6\3\3\0\10\3"+
    "\3\0\12\3\17\0\3\105\1\267\5\105\1\267\10\105"+
    "\1\205\34\105\4\267\1\105\1\267\21\105\4\270\3\105"+
    "\1\270\3\105\2\270\3\105\1\205\3\105\3\270\7\105"+
    "\1\270\16\105\6\270\21\105\4\271\3\105\1\271\3\105"+
    "\2\271\3\105\1\205\3\105\3\271\7\105\1\271\16\105"+
    "\6\271\21\105\4\272\3\105\1\272\3\105\2\272\3\105"+
    "\1\205\3\105\3\272\7\105\1\272\16\105\6\272\17\105"+
    "\1\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\7\3\1\273\1\3\3\0\10\3\3\0\12\3"+
    "\20\0\5\3\2\0\4\3\1\0\1\274\1\3\2\0"+
    "\1\3\2\0\11\3\3\0\10\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\2\3\1\275\6\3\3\0\10\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\1\223\1\3\2\0\1\3"+
    "\2\0\11\3\3\0\10\3\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\11\3"+
    "\3\0\1\276\7\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\3\0"+
    "\2\3\1\277\5\3\3\0\1\216\11\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\2\3"+
    "\1\300\6\3\3\0\10\3\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\1\301"+
    "\10\3\3\0\10\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\3\0"+
    "\7\3\1\302\3\0\12\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\11\3\3\0\10\3"+
    "\3\0\1\3\1\303\10\3\20\0\5\3\2\0\4\3"+
    "\1\0\1\304\1\3\2\0\1\3\2\0\11\3\3\0"+
    "\10\3\3\0\12\3\25\0\1\231\75\0\36\132\1\231"+
    "\1\233\44\132\1\0\5\3\2\0\4\3\1\0\1\305"+
    "\1\3\2\0\1\3\2\0\11\3\3\0\10\3\3\0"+
    "\12\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\11\3\3\0\10\3\3\0\1\216\11\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\7\3\1\306\1\3\3\0\10\3\3\0\1\307"+
    "\11\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\11\3\3\0\10\3\3\0\2\3\1\310"+
    "\7\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\11\3\3\0\5\3\1\223\2\3\3\0"+
    "\12\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\5\3\1\311\3\3\3\0\10\3\3\0"+
    "\12\3\20\0\5\3\2\0\4\3\1\0\1\312\1\3"+
    "\2\0\1\3\2\0\11\3\3\0\10\3\3\0\12\3"+
    "\20\0\5\3\2\0\4\3\1\0\2\3\2\0\1\313"+
    "\2\0\1\314\10\3\3\0\10\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\7\3\1\315\1\3\3\0\10\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\3\0\7\3\1\316\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\317\2\0\11\3"+
    "\3\0\10\3\3\0\12\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\11\3\3\0\1\3"+
    "\1\320\6\3\3\0\12\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\5\3\1\321\3\3"+
    "\3\0\10\3\3\0\12\3\21\0\2\252\5\0\1\252"+
    "\7\0\1\163\35\0\6\252\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\6\3\1\322\2\3"+
    "\3\0\10\3\3\0\12\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\1\323\10\3\3\0"+
    "\10\3\3\0\12\3\22\0\1\70\5\0\1\70\45\0"+
    "\4\70\1\0\1\70\21\0\4\70\3\0\1\70\3\0"+
    "\2\70\7\0\3\70\7\0\1\70\16\0\6\70\21\0"+
    "\4\172\3\0\1\172\3\0\2\172\7\0\3\172\7\0"+
    "\1\172\16\0\6\172\21\0\4\324\3\0\1\324\3\0"+
    "\2\324\7\0\3\324\7\0\1\324\16\0\6\324\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\6\3\1\223\2\3\3\0\10\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\3\0\10\3\3\0\5\3\1\223\4\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\3\0\10\3\3\0\4\3\1\223\5\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\3\0\10\3\3\0\7\3\1\223\2\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\6\3\1\325\2\3\3\0\10\3\3\0\12\3\17\0"+
    "\3\105\1\104\5\105\1\104\10\105\1\205\34\105\4\104"+
    "\1\105\1\104\21\105\4\104\3\105\1\104\3\105\2\104"+
    "\3\105\1\205\3\105\3\104\7\105\1\104\16\105\6\104"+
    "\21\105\4\207\3\105\1\207\3\105\2\207\3\105\1\205"+
    "\3\105\3\207\7\105\1\207\16\105\6\207\21\105\4\326"+
    "\3\105\1\326\3\105\2\326\3\105\1\205\3\105\3\326"+
    "\7\105\1\326\16\105\6\326\17\105\1\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\3\0"+
    "\10\3\3\0\2\3\1\327\1\3\1\263\1\3\1\264"+
    "\1\3\1\223\1\265\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\5\3\1\330\3\3\3\0"+
    "\10\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\3\0\1\3\1\331"+
    "\6\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\7\3\1\332\1\3\3\0"+
    "\10\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\7\3\1\333\1\3\3\0"+
    "\10\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\6\3\1\334\2\3\3\0"+
    "\10\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\10\3\1\335\3\0\10\3"+
    "\3\0\12\3\20\0\5\3\2\0\4\3\1\0\1\336"+
    "\1\3\2\0\1\3\2\0\11\3\3\0\10\3\3\0"+
    "\12\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\337\2\0\11\3\3\0\10\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\7\3\1\340\1\3\3\0\10\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\3\0\2\3\1\341\5\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\3\0\1\342\7\3\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\5\3"+
    "\1\201\3\3\3\0\10\3\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\11\3"+
    "\3\0\1\343\7\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\3\0"+
    "\1\344\7\3\3\0\12\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\11\3\3\0\1\223"+
    "\7\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\2\3\1\345\6\3\3\0"+
    "\10\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\7\3\1\346\1\3\3\0"+
    "\10\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\3\0\2\3\1\347"+
    "\5\3\3\0\12\3\21\0\4\350\3\0\1\350\3\0"+
    "\2\350\7\0\3\350\7\0\1\350\16\0\6\350\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\7\3\1\351\1\3\3\0\10\3\3\0\12\3\17\0"+
    "\2\105\4\352\3\105\1\352\3\105\2\352\3\105\1\205"+
    "\3\105\3\352\7\105\1\352\16\105\6\352\17\105\1\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\7\3\1\261\1\3\3\0\10\3\3\0\12\3\20\0"+
    "\4\3\1\223\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\11\3\3\0\10\3\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\11\3"+
    "\3\0\10\3\3\0\3\3\1\353\6\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\11\3"+
    "\3\0\10\3\3\0\4\3\1\263\4\3\1\265\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\5\3\1\354\3\3\3\0\10\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\1\261\1\3\2\0\1\3"+
    "\2\0\11\3\3\0\10\3\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\5\3"+
    "\1\355\3\3\3\0\10\3\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\1\356\1\3\2\0\1\3\2\0"+
    "\11\3\3\0\10\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\7\3\1\357"+
    "\1\3\3\0\10\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\7\3\1\360"+
    "\1\3\3\0\10\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\3\0"+
    "\10\3\3\0\3\3\1\361\6\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\3\0"+
    "\10\3\3\0\1\3\1\362\10\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\3\0"+
    "\2\3\1\137\5\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\7\3\1\363"+
    "\1\3\3\0\10\3\3\0\12\3\21\0\4\173\3\0"+
    "\1\173\3\0\2\173\7\0\3\173\7\0\1\173\16\0"+
    "\6\173\17\0\2\105\4\211\3\105\1\211\3\105\2\211"+
    "\3\105\1\205\3\105\3\211\7\105\1\211\16\105\6\211"+
    "\17\105\1\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\6\3\1\364\2\3\3\0\10\3\3\0"+
    "\12\3\20\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\1\365\10\3\3\0\10\3\3\0\12\3"+
    "\20\0\5\3\2\0\2\3\1\366\1\3\1\0\2\3"+
    "\2\0\1\3\2\0\11\3\3\0\10\3\3\0\12\3"+
    "\20\0\5\3\2\0\4\3\1\0\1\367\1\3\2\0"+
    "\1\3\2\0\11\3\3\0\10\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\6\3\1\370\2\3\3\0\10\3\3\0\12\3\20\0"+
    "\5\3\2\0\4\3\1\0\2\3\2\0\1\3\2\0"+
    "\11\3\3\0\7\3\1\371\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\1\372\1\3\2\0\1\3\2\0"+
    "\11\3\3\0\10\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\3\0"+
    "\10\3\3\0\4\3\1\263\1\3\1\373\3\3\20\0"+
    "\5\3\2\0\4\3\1\0\1\374\1\3\2\0\1\3"+
    "\2\0\11\3\3\0\10\3\3\0\12\3\20\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\1\375"+
    "\10\3\3\0\10\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\3\0"+
    "\10\3\3\0\7\3\1\376\2\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\7\3\1\377"+
    "\1\3\3\0\10\3\3\0\12\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\3\0"+
    "\10\3\3\0\1\3\1\u0100\10\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\11\3\3\0"+
    "\10\3\3\0\10\3\1\223\1\3\20\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\1\u0101\10\3"+
    "\3\0\10\3\3\0\12\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\11\3\3\0\10\3"+
    "\3\0\3\3\1\u0102\6\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\6\3\1\u0103\2\3"+
    "\3\0\10\3\3\0\12\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\5\3\1\u0104\3\3"+
    "\3\0\10\3\3\0\12\3\20\0\5\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\2\0\5\3\1\u0105\3\3"+
    "\3\0\10\3\3\0\12\3\20\0\5\3\2\0\4\3"+
    "\1\0\1\u0106\1\3\2\0\1\3\2\0\11\3\3\0"+
    "\10\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\3\0\3\3\1\u0107"+
    "\4\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\3\0\4\3\1\u0108"+
    "\3\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\3\0\5\3\1\u0109"+
    "\2\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\3\0\6\3\1\u010a"+
    "\1\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\3\3\1\u010b\5\3\3\0"+
    "\10\3\3\0\12\3\20\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\3\0\7\3\1\u010c"+
    "\3\0\12\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\11\3\3\0\2\3\1\u010d\5\3"+
    "\3\0\12\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\11\3\3\0\4\3\1\u010e\3\3"+
    "\3\0\12\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\11\3\3\0\5\3\1\u010f\2\3"+
    "\3\0\12\3\20\0\5\3\2\0\4\3\1\0\2\3"+
    "\2\0\1\3\2\0\11\3\3\0\6\3\1\u0110\1\3"+
    "\3\0\12\3\17\0\1\u0111\5\u0112\1\0\1\u0111\4\u0112"+
    "\1\u0111\2\u0112\2\u0111\1\u0112\2\u0111\11\u0112\1\0\2\u0111"+
    "\10\u0112\1\0\2\u0111\12\u0112\17\u0111\5\0\1\u0113\77\0"+
    "\4\3\1\u0114\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\11\3\3\0\10\3\3\0\12\3\34\0\1\u0115"+
    "\67\0\5\3\2\0\4\3\1\0\1\u0116\1\3\2\0"+
    "\1\3\2\0\11\3\3\0\10\3\3\0\12\3\47\0"+
    "\1\u0117\54\0\5\3\2\0\4\3\1\0\2\3\2\0"+
    "\1\3\2\0\4\3\1\u0118\4\3\3\0\10\3\3\0"+
    "\12\3\45\0\1\u0119\56\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\2\3\1\u011a\6\3\3\0"+
    "\10\3\3\0\12\3\43\0\1\u011b\60\0\5\3\2\0"+
    "\4\3\1\0\2\3\2\0\1\3\2\0\1\u011c\10\3"+
    "\3\0\10\3\3\0\12\3\61\0\1\u011d\42\0\5\3"+
    "\2\0\4\3\1\0\2\3\2\0\1\3\2\0\11\3"+
    "\3\0\2\3\1\u011e\5\3\3\0\12\3\52\0\1\u011f"+
    "\51\0\5\3\2\0\4\3\1\0\2\3\2\0\1\3"+
    "\2\0\7\3\1\u0120\1\3\3\0\10\3\3\0\12\3"+
    "\24\0\1\u0121\77\0\4\3\1\u0122\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\3\0\10\3\3\0"+
    "\12\3\70\0\1\u0123\33\0\5\3\2\0\4\3\1\0"+
    "\2\3\2\0\1\3\2\0\11\3\3\0\10\3\1\0"+
    "\1\u0123\1\0\12\3\71\0\1\u0124\52\0\1\u0125\113\0"+
    "\1\u0126\105\0\1\u0127\65\0\1\u0128\120\0\1\u0129\101\0"+
    "\1\u012a\101\0\1\u012b\115\0\1\u012c\60\0\1\u012d\66\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16456];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\26\1\1\11\3\1\2\11\6\1\2\11"+
    "\2\1\3\11\1\1\1\11\1\1\2\11\7\1\1\0"+
    "\1\11\2\0\2\1\2\11\4\1\2\0\1\1\1\0"+
    "\22\1\1\0\14\1\13\11\1\0\1\11\1\1\1\0"+
    "\3\1\4\0\1\11\10\1\2\0\1\1\2\0\16\1"+
    "\1\11\1\1\1\0\21\1\4\0\6\1\4\0\31\1"+
    "\1\0\1\1\1\0\21\1\1\0\1\1\1\0\46\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2506) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(Sym.EOF) ;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 69: break;
          case 2: 
            { return new Symbol(Sym.identifier, yytext());
            }
          case 70: break;
          case 3: 
            { return new Symbol(Sym.int_lit, yytext());
            }
          case 71: break;
          case 4: 
            { return new Symbol(Sym.dot);
            }
          case 72: break;
          case 5: 
            { return new Symbol(Sym.plus_op);
            }
          case 73: break;
          case 6: 
            { return new Symbol(Sym.minus_op);
            }
          case 74: break;
          case 7: 
            { return new Symbol(Sym.div_op);
            }
          case 75: break;
          case 8: 
            { return new Symbol(Sym.star_op);
            }
          case 76: break;
          case 9: 
            { return new Symbol(Sym.semicolon);
            }
          case 77: break;
          case 10: 
            { return new Symbol(Sym.close_curly_brac);
            }
          case 78: break;
          case 11: 
            { return new Symbol(Sym.amp_op);
            }
          case 79: break;
          case 12: 
            { return new Symbol(Sym.equal);
            }
          case 80: break;
          case 13: 
            { return new Symbol(Sym.not_op);
            }
          case 81: break;
          case 14: 
            { return new Symbol(Sym.open_brac);
            }
          case 82: break;
          case 15: 
            { return new Symbol(Sym.close_brac);
            }
          case 83: break;
          case 16: 
            { return new Symbol(Sym.pipe_op);
            }
          case 84: break;
          case 17: 
            { return new Symbol(Sym.less_op);
            }
          case 85: break;
          case 18: 
            { return new Symbol(Sym.open_square_brac);
            }
          case 86: break;
          case 19: 
            { return new Symbol(Sym.close_square_brac);
            }
          case 87: break;
          case 20: 
            { return new Symbol(Sym.pow_op);
            }
          case 88: break;
          case 21: 
            { return new Symbol(Sym.greater_op);
            }
          case 89: break;
          case 22: 
            { return new Symbol(Sym.open_curly_brac);
            }
          case 90: break;
          case 23: 
            { return new Symbol(Sym.colon);
            }
          case 91: break;
          case 24: 
            { return new Symbol(Sym.comma);
            }
          case 92: break;
          case 25: 
            { return new Symbol(Sym.mod_op);
            }
          case 93: break;
          case 26: 
            { return new Symbol(Sym.float_lit, yytext());
            }
          case 94: break;
          case 27: 
            { return new Symbol(Sym.imaginary_lit, yytext());
            }
          case 95: break;
          case 28: 
            { return new Symbol(Sym.string_lit, yytext());
            }
          case 96: break;
          case 29: 
            { return new Symbol(Sym.inc_op);
            }
          case 97: break;
          case 30: 
            { return new Symbol(Sym.dec_op);
            }
          case 98: break;
          case 31: 
            { return new Symbol(Sym.ifd);
            }
          case 99: break;
          case 32: 
            { /* ignore */
            }
          case 100: break;
          case 33: 
            { return new Symbol(Sym.go);
            }
          case 101: break;
          case 34: 
            { return new Symbol(Sym.and_op);
            }
          case 102: break;
          case 35: 
            { return new Symbol(Sym.amp_pow_op);
            }
          case 103: break;
          case 36: 
            { return new Symbol(Sym.equal_equal_op);
            }
          case 104: break;
          case 37: 
            { return new Symbol(Sym.not_equal_op);
            }
          case 105: break;
          case 38: 
            { return new Symbol(Sym.or_op);
            }
          case 106: break;
          case 39: 
            { return new Symbol(Sym.chan_op);
            }
          case 107: break;
          case 40: 
            { return new Symbol(Sym.less_equal_op);
            }
          case 108: break;
          case 41: 
            { return new Symbol(Sym.left_shift_op);
            }
          case 109: break;
          case 42: 
            { return new Symbol(Sym.greater_equal_op);
            }
          case 110: break;
          case 43: 
            { return new Symbol(Sym.right_shift_op);
            }
          case 111: break;
          case 44: 
            { return new Symbol(Sym.short_ass);
            }
          case 112: break;
          case 45: 
            { return new Symbol(Sym.tri_dot);
            }
          case 113: break;
          case 46: 
            { return new Symbol(Sym.rune_lit, yytext());
            }
          case 114: break;
          case 47: 
            { return new Symbol(Sym.ford);
            }
          case 115: break;
          case 48: 
            { return new Symbol(Sym.var);
            }
          case 116: break;
          case 49: 
            { return new Symbol(Sym.map);
            }
          case 117: break;
          case 50: 
            { return new Symbol(Sym.elsed);
            }
          case 118: break;
          case 51: 
            { return new Symbol(Sym.funcd);
            }
          case 119: break;
          case 52: 
            { return new Symbol(Sym.type);
            }
          case 120: break;
          case 53: 
            { return new Symbol(Sym.cased);
            }
          case 121: break;
          case 54: 
            { return new Symbol(Sym.chan);
            }
          case 122: break;
          case 55: 
            { return new Symbol(Sym.gotod);
            }
          case 123: break;
          case 56: 
            { return new Symbol(Sym.defer);
            }
          case 124: break;
          case 57: 
            { return new Symbol(Sym.breakd);
            }
          case 125: break;
          case 58: 
            { return new Symbol(Sym.range);
            }
          case 126: break;
          case 59: 
            { return new Symbol(Sym.constd);
            }
          case 127: break;
          case 60: 
            { return new Symbol(Sym.importd);
            }
          case 128: break;
          case 61: 
            { return new Symbol(Sym.returnd);
            }
          case 129: break;
          case 62: 
            { return new Symbol(Sym.select);
            }
          case 130: break;
          case 63: 
            { return new Symbol(Sym.struct);
            }
          case 131: break;
          case 64: 
            { return new Symbol(Sym.switchd);
            }
          case 132: break;
          case 65: 
            { return new Symbol(Sym.packaged);
            }
          case 133: break;
          case 66: 
            { return new Symbol(Sym.continued);
            }
          case 134: break;
          case 67: 
            { return new Symbol(Sym.fallthrough);
            }
          case 135: break;
          case 68: 
            { return new Symbol(Sym.interfaced);
            }
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
